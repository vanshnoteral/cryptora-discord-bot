@tailwind base;
@tailwind components;
@tailwind utilities;

/* LIGHT MODE */
:root {
  --button-outline: rgba(0,0,0, .10);
  --badge-outline: rgba(0,0,0, .05);

  /* Automatic computation of border around primary / danger buttons */
  --opaque-button-border-intensity: -8; /* In terms of percentages */

  /* Backgrounds applied on top of other backgrounds when hovered/active */
  --elevate-1: rgba(0,0,0, .03);
  --elevate-2: rgba(0,0,0, .08);

  --background: 220 3% 96%;

  --foreground: 220 15% 15%;

  --border: 220 8% 85%;

  --card: 220 2% 94%;

  --card-foreground: 220 15% 15%;

  --card-border: 220 8% 88%;

  --sidebar: 220 4% 91%;

  --sidebar-foreground: 220 15% 15%;

  --sidebar-border: 220 8% 83%;

  --sidebar-primary: 180 85% 32%;

  --sidebar-primary-foreground: 180 100% 95%;

  --sidebar-accent: 220 8% 86%;

  --sidebar-accent-foreground: 220 15% 15%;

  --sidebar-ring: 180 85% 32%;

  --popover: 220 5% 89%;

  --popover-foreground: 220 15% 15%;

  --popover-border: 220 8% 81%;

  --primary: 180 85% 32%;

  --primary-foreground: 180 100% 95%;

  --secondary: 220 6% 86%;

  --secondary-foreground: 220 15% 15%;

  --muted: 220 8% 87%;

  --muted-foreground: 220 12% 45%;

  --accent: 220 12% 84%;

  --accent-foreground: 220 15% 15%;

  --destructive: 0 84% 35%;

  --destructive-foreground: 0 100% 95%;

  --input: 220 15% 70%;
  --ring: 180 85% 32%;
  --chart-1: 180 85% 32%;
  --chart-2: 280 85% 45%;
  --chart-3: 240 85% 50%;
  --chart-4: 200 75% 40%;
  --chart-5: 320 75% 45%;

  --font-sans: 'Exo 2', Inter, sans-serif;
  --font-serif: Georgia, serif;
  --font-mono: 'JetBrains Mono', 'Fira Code', Menlo, monospace;
  --radius: .75rem; /* 12px */
  --shadow-2xs: 0px 1px 2px 0px rgba(0, 0, 0, 0.05);
  --shadow-xs: 0px 1px 3px 0px rgba(0, 0, 0, 0.1), 0px 1px 2px 0px rgba(0, 0, 0, 0.06);
  --shadow-sm: 0px 1px 3px 0px rgba(0, 0, 0, 0.1), 0px 1px 2px 0px rgba(0, 0, 0, 0.06);
  --shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.1), 0px 1px 2px 0px rgba(0, 0, 0, 0.06);
  --shadow-md: 0px 4px 6px -1px rgba(0, 0, 0, 0.1), 0px 2px 4px -1px rgba(0, 0, 0, 0.06);
  --shadow-lg: 0px 10px 15px -3px rgba(0, 0, 0, 0.1), 0px 4px 6px -2px rgba(0, 0, 0, 0.05);
  --shadow-xl: 0px 20px 25px -5px rgba(0, 0, 0, 0.1), 0px 10px 10px -5px rgba(0, 0, 0, 0.04);
  --shadow-2xl: 0px 25px 50px -12px rgba(0, 0, 0, 0.25);
  --tracking-normal: 0em;
  --spacing: 0.25rem;

  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */

  /* Fallback for older browsers */
  --sidebar-primary-border: hsl(var(--sidebar-primary));
  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);

  /* Fallback for older browsers */
  --sidebar-accent-border: hsl(var(--sidebar-accent));
  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);

  /* Fallback for older browsers */
  --primary-border: hsl(var(--primary));
  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);

  /* Fallback for older browsers */
  --secondary-border: hsl(var(--secondary));
  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);

  /* Fallback for older browsers */
  --muted-border: hsl(var(--muted));
  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);

  /* Fallback for older browsers */
  --accent-border: hsl(var(--accent));
  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);

  /* Fallback for older browsers */
  --destructive-border: hsl(var(--destructive));
  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);
}

.dark {
  --button-outline: rgba(255,255,255, .10);
  --badge-outline: rgba(255,255,255, .05);

  --opaque-button-border-intensity: 9;  /* In terms of percentages */

  /* Backgrounds applied on top of other backgrounds when hovered/active */
  --elevate-1: rgba(255,255,255, .04);
  --elevate-2: rgba(255,255,255, .09);

  /* Aesthetic Futuristic Theme Colors */
  --background: 220 50% 8%;

  --foreground: 180 20% 95%;

  --border: 180 80% 25%;

  --card: 220 40% 12%;

  --card-foreground: 180 20% 92%;

  --card-border: 180 70% 30%;

  --sidebar: 220 45% 10%;

  --sidebar-foreground: 180 20% 92%;

  --sidebar-border: 180 60% 25%;

  --sidebar-primary: 180 100% 60%;

  --sidebar-primary-foreground: 220 40% 10%;

  --sidebar-accent: 280 90% 70%;

  --sidebar-accent-foreground: 220 40% 10%;

  --sidebar-ring: 180 100% 60%;

  --popover: 220 40% 15%;

  --popover-foreground: 180 20% 92%;

  --popover-border: 180 70% 35%;

  --primary: 180 100% 60%;

  --primary-foreground: 220 40% 10%;

  --secondary: 280 90% 70%;

  --secondary-foreground: 220 40% 10%;

  --muted: 220 40% 16%;

  --muted-foreground: 180 20% 70%;

  --accent: 240 90% 75%;

  --accent-foreground: 220 40% 10%;

  --destructive: 0 80% 65%;

  --destructive-foreground: 220 40% 10%;

  --input: 220 40% 18%;
  --ring: 180 100% 60%;
  --chart-1: 180 100% 60%;
  --chart-2: 280 90% 70%;
  --chart-3: 240 90% 75%;
  --chart-4: 200 80% 70%;
  --chart-5: 320 80% 75%;

  /* Aesthetic neon colors */
  --neon-cyan: 180 100% 60%;
  --neon-purple: 280 90% 70%;
  --neon-blue: 240 90% 75%;
  --neon-pink: 320 90% 80%;

  --shadow-2xs: 0px 1px 2px 0px rgba(0, 0, 0, 0.3);
  --shadow-xs: 0px 1px 3px 0px rgba(0, 0, 0, 0.4), 0px 1px 2px 0px rgba(0, 0, 0, 0.2);
  --shadow-sm: 0px 1px 3px 0px rgba(0, 0, 0, 0.4), 0px 1px 2px 0px rgba(0, 0, 0, 0.2);
  --shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.4), 0px 1px 2px 0px rgba(0, 0, 0, 0.2);
  --shadow-md: 0px 4px 6px -1px rgba(0, 0, 0, 0.5), 0px 2px 4px -1px rgba(0, 0, 0, 0.3);
  --shadow-lg: 0px 10px 15px -3px rgba(0, 0, 0, 0.6), 0px 4px 6px -2px rgba(0, 0, 0, 0.4);
  --shadow-xl: 0px 20px 25px -5px rgba(0, 0, 0, 0.7), 0px 10px 10px -5px rgba(0, 0, 0, 0.5);
  --shadow-2xl: 0px 25px 50px -12px rgba(0, 0, 0, 0.8);
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply font-sans antialiased bg-background text-foreground;
  }

  html {
    scroll-behavior: smooth;
  }

  .dark {
    color-scheme: dark;
  }
}

/* Cyberpunk glassmorphism and neon effects */
@layer components {
  .glass-card {
    @apply backdrop-blur-xl border;
    background: linear-gradient(135deg, rgba(0, 255, 255, 0.08) 0%, rgba(128, 0, 255, 0.05) 50%, rgba(0, 150, 255, 0.08) 100%);
    border: 1px solid rgba(0, 255, 255, 0.2);
    box-shadow: 0 8px 32px rgba(0, 255, 255, 0.1), 0 0 0 1px rgba(255, 255, 255, 0.05) inset;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .glass-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 12px 40px rgba(0, 255, 255, 0.15), 0 0 0 1px rgba(255, 255, 255, 0.1) inset;
  }

  .neon-glow {
    text-shadow: 0 0 2px currentColor, 0 0 4px currentColor;
  }

  .neon-border {
    box-shadow: 0 0 2px currentColor, 0 0 4px currentColor, inset 0 0 2px rgba(0, 255, 255, 0.05);
  }

  .neon-cyan {
    color: hsl(var(--neon-cyan));
  }

  .neon-purple {
    color: hsl(var(--neon-purple));
  }

  .neon-blue {
    color: hsl(var(--neon-blue));
  }

  .bg-neon-cyan {
    background-color: hsl(var(--neon-cyan));
  }

  .bg-neon-purple {
    background-color: hsl(var(--neon-purple));
  }

  .bg-neon-blue {
    background-color: hsl(var(--neon-blue));
  }

  /* Neon opacity variants */
  .bg-neon-cyan-5 {
    background-color: hsl(var(--neon-cyan) / 0.05);
  }

  .bg-neon-purple-5 {
    background-color: hsl(var(--neon-purple) / 0.05);
  }

  .bg-neon-blue-5 {
    background-color: hsl(var(--neon-blue) / 0.05);
  }

  .border-neon-cyan-20 {
    border-color: hsl(var(--neon-cyan) / 0.20);
  }

  .border-neon-purple-20 {
    border-color: hsl(var(--neon-purple) / 0.20);
  }

  .border-neon-blue-20 {
    border-color: hsl(var(--neon-blue) / 0.20);
  }

  .gradient-cyber {
    background: linear-gradient(135deg, hsl(var(--neon-cyan)) 0%, hsl(var(--neon-purple)) 50%, hsl(var(--neon-blue)) 100%);
  }

  .gradient-bg {
    background: radial-gradient(circle at 20% 80%, rgba(0, 255, 255, 0.15) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(128, 0, 255, 0.15) 0%, transparent 50%),
                radial-gradient(circle at 40% 40%, rgba(0, 150, 255, 0.1) 0%, transparent 50%),
                linear-gradient(135deg, hsl(220, 50%, 8%) 0%, hsl(230, 40%, 12%) 50%, hsl(220, 45%, 10%) 100%);
  }

  .futuristic-border {
    position: relative;
    overflow: hidden;
  }

  .futuristic-border::before {
    content: '';
    position: absolute;
    inset: 0;
    padding: 1px;
    background: linear-gradient(135deg, 
      hsl(var(--neon-cyan)) 0%, 
      transparent 20%, 
      transparent 80%, 
      hsl(var(--neon-purple)) 100%);
    border-radius: inherit;
    mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
    mask-composite: xor;
    -webkit-mask-composite: xor;
  }

  .text-gradient {
    background: linear-gradient(135deg, hsl(var(--neon-cyan)), hsl(var(--neon-purple)), hsl(var(--neon-blue)));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .cyber-grid {
    background-image: 
      linear-gradient(rgba(0, 255, 255, 0.08) 1px, transparent 1px),
      linear-gradient(90deg, rgba(0, 255, 255, 0.08) 1px, transparent 1px);
    background-size: 60px 60px;
    animation: grid-move 25s linear infinite;
  }

  .floating-orbs {
    position: absolute;
    width: 100%;
    height: 100%;
    overflow: hidden;
    z-index: -1;
  }

  .floating-orb {
    position: absolute;
    border-radius: 50%;
    filter: blur(1px);
    animation: float-orb 20s infinite linear;
  }

  @keyframes float-orb {
    0% {
      transform: translateY(100vh) translateX(-50px) rotate(0deg);
      opacity: 0;
    }
    10% {
      opacity: 1;
    }
    90% {
      opacity: 1;
    }
    100% {
      transform: translateY(-100px) translateX(50px) rotate(360deg);
      opacity: 0;
    }
  }

  @keyframes grid-move {
    0% {
      transform: translate(0, 0);
    }
    100% {
      transform: translate(60px, 60px);
    }
  }

  .typing-animation {
    border-right: 2px solid hsl(var(--neon-cyan));
    animation: blink 1s infinite;
  }
}

/**
 * Using the elevate system.
 * Automatic contrast adjustment.
 *
 * <element className="hover-elevate" />
 * <element className="active-elevate-2" />
 *
 * // Using the tailwind utility when a data attribute is "on"
 * <element className="toggle-elevate data-[state=on]:toggle-elevated" />
 * // Or manually controlling the toggle state
 * <element className="toggle-elevate toggle-elevated" />
 *
 * Elevation systems have to handle many states.
 * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)
 * - toggled or not
 * - focused or not (this is not handled with these utilities)
 *
 * Even without handling focused or not, this is six possible combinations that
 * need to be distinguished from eachother visually.
 */
@layer utilities {

  /* Hide ugly search cancel button in Chrome until we can style it properly */
  input[type="search"]::-webkit-search-cancel-button {
    @apply hidden;
  }

  /* Placeholder styling for contentEditable div */
  [contenteditable][data-placeholder]:empty::before {
    content: attr(data-placeholder);
    color: hsl(var(--muted-foreground));
    pointer-events: none;
  }

  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of
   * buttons/badges can remove the automatic brightness adjustment on interactions
   * and program their own. */
  .no-default-hover-elevate {}

  .no-default-active-elevate {}


  /**
   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.
   * This way they can stack/compound. Both will overlap the parent's borders!
   * So borders will be automatically adjusted both on toggle, and hover/active,
   * and they will be compounded.
   */
  .toggle-elevate::before,
  .toggle-elevate-2::before {
    content: "";
    pointer-events: none;
    position: absolute;
    inset: 0px;
    /*border-radius: inherit;   match rounded corners */
    border-radius: inherit;
    z-index: -1;
    /* sits behind content but above backdrop */
  }

  .toggle-elevate.toggle-elevated::before {
    background-color: var(--elevate-2);
  }

  /* If there's a 1px border, adjust the inset so that it covers that parent's border */
  .border.toggle-elevate::before {
    inset: -1px;
  }

  /* Does not work on elements with overflow:hidden! */
  .hover-elevate:not(.no-default-hover-elevate),
  .active-elevate:not(.no-default-active-elevate),
  .hover-elevate-2:not(.no-default-hover-elevate),
  .active-elevate-2:not(.no-default-active-elevate) {
    position: relative;
    z-index: 0;
  }

  /* Cyberpunk/Neon theme animations and effects */
@keyframes float {
  0%, 100% { transform: translateY(0px); }
  50% { transform: translateY(-10px); }
}

@keyframes glow-pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.7; }
}

@keyframes neon-flicker {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.8; }
  75% { opacity: 0.9; }
}

@keyframes typing-animation {
  0%, 50% { opacity: 1; }
  51%, 100% { opacity: 0; }
}

.animate-float {
  animation: float 3s ease-in-out infinite;
}

.animate-glow-pulse {
  animation: glow-pulse 2s ease-in-out infinite;
}

.animate-neon-flicker {
  animation: neon-flicker 0.1s ease-in-out infinite;
}

.typing-animation {
  animation: typing-animation 1s linear infinite;
}

/* Gradient backgrounds */
.gradient-bg {
  background: linear-gradient(135deg, #0f0f23 0%, #1a1a2e 50%, #16213e 100%);
}

.gradient-cyber {
  background: linear-gradient(90deg, #00f5ff, #8a2be2, #0099ff);
}

.text-gradient {
  background: linear-gradient(135deg, #00f5ff, #8a2be2, #0099ff);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

/* Glass effect */
.glass-card {
  background: rgba(255, 255, 255, 0.05);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.1);
}

/* Cyber grid pattern */
.cyber-grid {
  background-image: 
    linear-gradient(rgba(0, 245, 255, 0.1) 1px, transparent 1px),
    linear-gradient(90deg, rgba(0, 245, 255, 0.1) 1px, transparent 1px);
  background-size: 50px 50px;
}

/* Floating orbs */
.floating-orbs {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  overflow: hidden;
  pointer-events: none;
}

.floating-orb {
  position: absolute;
  border-radius: 50%;
  animation: float 20s infinite linear;
  opacity: 0.6;
  filter: blur(1px);
}

/* Neon border effect */
.neon-border {
  box-shadow: 0 0 10px currentColor, inset 0 0 10px rgba(255, 255, 255, 0.1);
}

/* Futuristic border */
.futuristic-border {
  position: relative;
}

.futuristic-border::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  border: 1px solid;
  border-image: linear-gradient(45deg, #00f5ff, transparent, #8a2be2, transparent, #0099ff) 1;
  pointer-events: none;
}

/* Neon glow effect */
.neon-glow {
  text-shadow: 0 0 10px currentColor;
}

/* Hover elevate effects */
.hover-elevate {
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.hover-elevate:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
}

.hover-elevate:not(.no-default-hover-elevate)::after,
  .active-elevate:not(.no-default-active-elevate)::after,
  .hover-elevate-2:not(.no-default-hover-elevate)::after,
  .active-elevate-2:not(.no-default-active-elevate)::after {
    content: "";
    pointer-events: none;
    position: absolute;
    inset: 0px;
    /*border-radius: inherit;   match rounded corners */
    border-radius: inherit;
    z-index: 999;
    /* sits in front of content */
  }

  .hover-elevate:hover:not(.no-default-hover-elevate)::after,
  .active-elevate:active:not(.no-default-active-elevate)::after {
    background-color: var(--elevate-1);
  }

  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,
  .active-elevate-2:active:not(.no-default-active-elevate)::after {
    background-color: var(--elevate-2);
  }

  /* If there's a 1px border, adjust the inset so that it covers that parent's border */
  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,
  .border.active-elevate:not(.no-active-interaction-elevate)::after,
  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,
  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,
  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {
    inset: -1px;
  }
}